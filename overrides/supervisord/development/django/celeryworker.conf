; ==========================
;  celery worker supervisor
; ==========================

; the name of your supervisord program
[program:hubceleryworker]

; Set full path to celery program if using virtualenv
command=/usr/local/bin/celery worker --app=hub.celery --loglevel=INFO

; The directory to our Django project
directory=/src/

; Supervisor will start as many instances of this program as named by numprocs
numprocs=1

; we are in a development environment and want to see our stdout directly
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
redirect_stderr=true

; start automatically when supervisord is started
autostart=true

; May be one of false, unexpected, or true. If false, the process will never
; be autorestarted. If unexpected, the process will be restart when the program
; exits with an exit code that is not one of the exit codes associated with this
; processâ€™ configuration (see exitcodes). If true, the process will be
; unconditionally restarted when it exits, without regard to its exit code.
autorestart=true

; The total number of seconds which the program needs to stay running after
; a startup to consider the start successful.
startsecs=10

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600

; When resorting to send SIGKILL to the program to terminate it
; send SIGKILL to its whole process group instead,
; taking care of its children as well. Implies killasgroup=true
; This is useful for programs, such as Flask / Django in debug mode,
; that do not propagate stop signals to their children, leaving them orphaned.
stopasgroup=true
